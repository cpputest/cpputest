---
name: Basic builds

"on":
  push:
  pull_request:

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - uses: DoozyX/clang-format-lint-action@v0.14
        with:
          clangFormatVersion: 14
          source: examples

  automake:
    strategy:
      matrix:
        include:
          # Mac OSX
          - os: macos-latest
            cc: gcc
            cxx: g++
          - os: macos-latest
            cc: clang
            cxx: clang++
          # Linux
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: ubuntu-latest
            cc: clang
            cxx: clang++
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - run: brew install automake
        if: ${{ startswith(matrix.os, 'macos') }}
      - if: ${{ matrix.cxx }}
        run: echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV
      - if: ${{ matrix.cc }}
        run: echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
      - name: Configure
        run: |
          autoreconf -i .
          ./configure
      - name: Build and test
        run: make tdd

  cmake:
    strategy:
      matrix:
        include:
          - name: MSVC install
            os: windows-latest
            preset: MSVC
            install: true
            ctest_args: -C Debug
          - name: MSVC 20
            os: windows-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: MSVC
            ctest_args: -C Debug
          - name: ClangCL
            os: windows-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: ClangCL
            ctest_args: -C Debug
          - name: Linux Clang 98
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=98
            preset: Clang
          - name: Linux Clang 11
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=11
            preset: Clang
          - name: Linux Clang 14
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: Clang
          - name: Linux Clang 17
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: Clang
          - name: Linux Clang 20
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: Clang
          - name: Linux GNU 98
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=98
            preset: GNU
          - name: No long long
            os: ubuntu-latest
            preset: no-long-long
          - name: Detailed
            os: ubuntu-latest
            preset: detailed
          - name: Linux GNU Install
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=11
            preset: GNU
            install: true
          - name: Linux GNU 14
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: GNU
          - name: Linux GNU 17
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: GNU
          - name: Linux GNU 20
            os: ubuntu-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: GNU
          - name: MinGW
            os: ubuntu-latest
            preset: MinGW
            apt_packages: mingw-w64 wine64
          - name: No C++ Standard Library
            os: ubuntu-latest
            preset: no-std-cpp
          - name: No RTTI
            os: ubuntu-latest
            preset: no-rtti
          - name: No Exceptions
            os: ubuntu-latest
            preset: no-exceptions
          - name: No C Standard Library
            os: ubuntu-latest
            preset: no-std-c
          - name: Coverage
            os: ubuntu-latest
            preset: coverage
            apt_packages: lcov
          - name: GCC ARM embedded
            os: ubuntu-latest
            preset: arm-embedded
          - name: Mac install
            os: macos-latest
            preset: defaults
            install: true
          - name: Apple Clang 17
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=17
            preset: Clang
          - name: Apple Clang 20
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=20
            preset: Clang
          - name: Mac GNU 14
            os: macos-latest
            cmake_args: -DCMAKE_CXX_STANDARD=14
            preset: GNU
          - name: OpenWatcom DOS
            os: ubuntu-latest
            preset: DOS
            apt_packages: dosbox
          - name: Cygwin
            os: windows-latest
            preset: GNU
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      ### SETUP

      - name: Install packages
        run: sudo apt install -y ${{ matrix.apt_packages }}
        if: ${{ matrix.apt_packages }}

      - uses: carlosperate/arm-none-eabi-gcc-action@v1
        if: ${{ matrix.name == 'GCC ARM embedded' }}
      - name: Install QEMU
        # The version in the ubuntu repositories (6.2) is broken.
        run: |
          wget -nv http://ftp.de.debian.org/debian/pool/main/q/qemu/qemu-user-static_7.1+dfsg-2_amd64.deb -O qemu.deb
          sudo dpkg --install qemu.deb
          rm -f qemu.deb
        if: ${{ matrix.name == 'GCC ARM embedded' }}

      - name: Install OpenWatcom
        uses: open-watcom/setup-watcom@v0
        with:
          version: "2.0"
        if: ${{ matrix.name == 'OpenWatcom DOS' }}

      - run: git config --global core.autocrlf input
        if: ${{ matrix.name == 'Cygwin' }}
      - name: Checkout
        uses: actions/checkout@main

      - name: Install Cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          platform: x86
          packages: >
            cmake
            gcc-core
            gcc-g++
            make
        if: ${{ matrix.name == 'Cygwin' }}

      ## BUILD AND TEST

      - name: Configure
        run: cmake --preset ${{ matrix.preset }} ${{ matrix.cmake_args }}
      - name: Build
        run: cmake --build cpputest_build --verbose -j
      - name: Test
        run: ctest --test-dir cpputest_build ${{ matrix.ctest_args }}

      # POST PROCESSING

      - name: Install (*nix)
        run: |
          sudo cmake --install cpputest_build/
          pkg-config --print-provides cpputest
        if: ${{ matrix.install && !startswith(matrix.os, 'windows')}}
      - name: Install (Windows)
        run: cmake --install cpputest_build/ --config=Debug
        if: ${{ matrix.install && startswith(matrix.os, 'windows')}}
      - name: Use install
        run: |
          cmake -B build -S examples
          cmake --build build -j
          ctest --test-dir build
        if: ${{ matrix.install }}

      - name: Coverage
        run: |
          lcov --capture --directory . --no-external --output-file lcov.info
          lcov --remove lcov.info --output-file lcov.info '*/tests/*'
        if: ${{ matrix.name == 'Coverage' }}
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.name == 'Coverage' }}
